What is JSX?
    // JSX
    const element = <h1>Hello, world!</h1>;
    // corresponding JS
    const element = React.createElement('h1', null, 'Hello, world!');

    https://www.w3schools.com/react/react_jsx.asp -> online tools that outputs JS for every JSX snippet;

Why use JSX, why not write direct JS?
    - It has HTML like syntax, It reduces the amount of boilerplate code that we write to create DOM elements;
    - You can use any valid JS inside {};
    - JSX is optimized for performance - JS generated by Babel is optimized for performance;
    - Custom components
        You can use JSX to write custom components, and they can accept props (properties) and children (nested elements) as arguments;
        Custom components make our code more reusable and modular;

How does the browser understand and read JSX?
    Browsers don't understand JSX. 
    React applications typically use Babel, a free and open-source Javascript transpiler, that 
        transforms your JSX into regular javascript, before passing it to the browser;

JSX Syntax
    Use camelCase for attribute names
        Instead of using class for CSS classes, use className;
        Instead of using for for labels, use htmlFor;
    Use curly braces for expressions
        Eg: <h1>Hello, {name}</h1>
    Use parentheses for multiple lines
        Eg: const element = (
            <div>
                <h1>Hello</h1>
                <p>Welcome to my blog</p>
            </div>
        );    
    && is commonly used to render an element based on a boolean condition.
    If the expression on the left of the && evaluates as true, then the JSX on the right of the && will be rendered. 
    If the first expression is false, however, then the JSX to the right of the && will be ignored and not rendered.

Note #1:
    You can also represent multiple lines of HTML with JSX. However, there must always be one top level element with the rest of your code nested inside.


Note #2:
    Another popular use case with JSX is its ability to provide a range of element attributes designed to mirror those provided by HTML. 
    Custom attributes can be passed to the component and all attributes will be received by the component as props.

Note #3:
    Also, JavaScript expressions can be used inside JSX with curly brackets {}:


Note #4:
     The htmlFor reflects the for attribute in HTML.
     className and onClick instead of class and onclick,

Setup a Mock API
    - Goto https://www.mockable.io/
    - Try Now
    - Manage -> REST Mock 