DOM Core
	What is Document Object Model?
	Node: nodeType, nodeName vs tagName, nodeValue vs innerHTML, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, hasChildNodes(), appendChild(), insertBefore(), removeChild(), replaceChild(), cloneNode(), normalize()
	NodeList: length, item(index)
	NamedNodeList: item(index), getNamedItem(name), setNamedItem(node), removeNamedItem(name), getNamedItemNS(namespace, name), setNamedItemNS(node), removeNamedItemNS(namespaceURI, localName)
	Element: tagName, getAttribute(name), setAttribute(name, value), removeAttribute(name), hasAttribute(name), 
		getAttributeNS(namespaceURI, name), setAttributeNS(namespaceURI, name, value), removeAttributeNS(namespaceURI, name), hasAttributeNS(namespaceURI, name),
		getAttributeNode(name), setAttributeNode(attrNode), removeAttributeNode(attrNode), getAttributeNodeNS(namespaceURI, name), setAttributeNodeNS(attrNode),
		getElementsByTagName(tagname), getElementsByTagNameNS(namespaceURI, tagname)
	Attr: name, value, specified, ownerElement, isId
	CharacterData: data, length, appendData(stringArg ), insertData(offset, stringArg), deleteData(offset, count), replaceData(offset, count, stringArg), substringData(offset, count)
	Comment; Text: splitText(offset), normalize(); CDATASection;
	Document: docType, documentElement, createElement(tagName), createElementNS(namespaceURI, tagName), createAttribute(name), createAttributeNS(namespaceURI, name), 
		createTextNode(text), createCDATASection(text), createEnityReference(entityname), createProcessingInstruction(), createComment(text), createDocumentFragment(),
		getElementById(elementId), getElementsByTagName(tagname), getElementsByTagNameNS(namespaceURI, localName), normalizeDocument()
	DocumentFragment; DocumentType: name, entities, notations, publicId, systemId, internalSubset;
	Entity: publicId, systemId, notationName, inputEncoding, xmlEncoding, xmlVersion; EntityReference;
	Notation: publicId, systemId; ProcessingInstruction: data, target;