ES6 provides a new operator called spread operator that consists of three dots (...);
You can use it both as a Spread Operator and Rest Parameters;
------------------------------------------------------------------------------------------------------------------
What is Spread Operator?
    It allows you to unpack/spread out elements of an iterable object such as an array, map, set or string;

Examples: Used to concatenate 2 or more arrays;
    const odd = [1, 3, 5];
    const combined = [2, 4, 6, ...odd];
    console.log(combined); // [2, 4, 6, 1, 3, 5]

    const combined2 = [...odd, 2, 4, 6];
    console.log(combined2); // [ 1, 3, 5, 2, 4, 6 ]

    const combined3 = [2, ...odd, 4, 6];
    console.log(combined3); // [ 2, 1, 3, 5, 4, 6 ]
------------------------------------------------------------------------------------------------------------------
Eg: You have a compare function which accepts 2 arguments and you have an array of 2 numbers, how do you pass the array to the function?
    function compare(x, y) {
        return x - y;
    }
    var myArgs = [1, 2];

    // ES5 - Use apply() method as follows:
    var result = compare.apply(null, myArgs);
    console.log(result); // -1

    // ES6 - Use Spread operator
    // Spread operator spreads the elements of the array, so that x will have 1 and y will have 2;
    var result = compare(...myArgs);
    console.log(result); // -1
------------------------------------------------------------------------------------------------------------------
Eg: 
    Sometimes, a function may accept an indefinite number of arguments;
    Filling arguments from an array is not convenient;
    
    For example, push() method of an array object allows you to add one or more elements to an array; 

    var rivers = ['Nile', 'Ganges', 'Yangte'];
    var moreRivers = ['Danube', 'Amazon'];
    
    If you want to pass an array to the push() method, you need to use apply() method as follows:
    Array.prototype.push.apply(rivers, moreRivers);
    console.log(rivers); // 

    // You can also use Spread operator to improve readability of the code;
    rivers.push(...moreRivers);
------------------------------------------------------------------------------------------------------------------
Eg: It can be used to convert a String into individual characters;
    let chars = ['A', ...'BC', 'D'];
    console.log(chars); // ["A", "B", "C", "D"]
------------------------------------------------------------------------------------------------------------------
Eg: It can be used to shallow copy an array;
    let scores = [80, 70, 90];
    let copiedScores = [...scores];
    console.log(copiedScores); // [80, 70, 90]
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
What is Rest Parameter?
    It is used to pack an indefinite number of arguments into an array;

    Eg:
        function abc(a, b, ...rest) {
            console.log(a);         // 1
            console.log(b);         // 2
            console.log(rest);      // [3, 'A', 'B', 'C']
        }
        abc(1, 2, 3, 'A', 'B', 'C');
        abc(1, 2); // If you pass only 2 parameters, rest will be empty array;

    Eg: rest parameter must be at the end of the argument list;
        function abc(a, ...rest, z) {   // SyntaxError: Rest parameter must be last formal parameter
            console.log(a);
            console.log(rest);
            console.log(z);
        }
        abc(1, 2, 3, 'A', 'B', 'C');

    Eg: args will hold all parameters as an array;
        function sum(...numbers) {
            return numbers.reduce((sum, n) => {
                return sum + n;
            }, 0);
        }
        // You can pass whatever number of arguments you want, ... packs them into an array and numbers will hold that array;
        sum(1, 2, 3, 4); // 10
        sum(1, 2, 3, 4, 5, 6, 7, 8); // 36
        
        function sumOnlyNumbers(...args) {
            return args.filter(e => typeof e === 'number').reduce((prev, curr)=> prev + curr);
        }
        sumOnlyNumbers(10, 'Hi', null, undefined, 20); // 30
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
Spread Operators VS Rest Parmeters
    Three dots(...) are used in both cases;
    Here are the main differences:
        - Spread operator unpacks elements;
        - Rest parametr packs the individual elements into an array;
        - Rest parameters must be the last arguments of a function. However, the spread operator can be anywhere;
------------------------------------------------------------------------------------------------------------------
One use of rest and spread operator is, say you have written one library/util, used by many:
    const MathLibrary = {
        calculateProduct(a, b) {
            return a * b;
        }
    }
    calculateProduct is weird name, it actually mulitplies the arguments;
    But, if rename calculateProduct to multiply, it will break the dependant applications;
    
    const MathLibrary = {
        calculateProduct(...args) { // Rest Operator
            console.log('This method is deprecated. Consider using multiply...');
            return multiply(...args); // Spread Operator
        },
        multiply(a, b) {
            return a * b;
        }
    }
    This will not break any dependant modules.
    calculateProduct just passes the incoming parameters to multiply, it doesn't matter howmany arguments are there.




------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------
