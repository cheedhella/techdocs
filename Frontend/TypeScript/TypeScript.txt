
2. Declaring Variables: var, let, const; // TODO: Scope of variables declared <script> block;
	TS compiler converts let to var in js; So that, this works in older browsers, this behavior can be disabled;
	type keyword;

3. Type Checking: Type Inference, Type Annotations;

4. User-defined Types: Union, Intersection, Type Guards: typeof, instanceof, is, equality, custom;



  Array, enum; Interfaces, Classes, Modules; Tuples, Decorators;
	readonly, Readonly<T>, ReadonlyArray<T>;
	
	Functions: named, anonymous, arrow functions; Mandatory, Optional, Default, Rest parameters; Type Inference for function parameters and return type;
	https://dmitripavlutin.com/differences-between-arrow-and-regular-functions/

10. 
2. Interfaces: interface as Array type, Object type, function signature, constructor type, index signature type VS Record; Elvis operator(optional members), readonly members, ReadOnly, ReadonlyArray types;
   Classes: class, constructor, new, this, get/set accessor methods, extends, super, implements; Access Modifiers: private, protected, public; static methods; abstract property, abstract method, abstract class;
   Type Assertion;


---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
Basic types
Function typing + annotations
Type definition files
arrays
modules
Classes
Projects



TypeScript does not change how JavaScript behaves, it can only enforce the rules during code compilations;


Please note that variables declared with the var keyword are subject to hoisting. Hoisting means that if we declare a variable (declared but not initialized) at the end of a function, the runtime will hoist it to the top and we will not have any error if we would have used that variable before being declared.


epts like type checking, iterators, and manipulating objects and arrays. 




Array.isArray Type checking
readonly
----------------------------------------------------------------------------------------------------------------------------------------------------------
Datatypes
	- Type Interence
	- Type Casting

Features of TypeScript?
	- Type annotations and compile time type checking
	- Type inference
	- Type erasure
	- encapsulation, inheritance, polymorphism
	- Enumerated types
	- Optional and default parameters
	- Generics
	- Namespaces
	- Await

Can I use a var without declaring it, like global in JS?


Type Inference
	If the type of a variable is not specified, it is inferred based on it's value. 

Type Casting
	TypeScript includes the ability to down cast and to up cast types. 
	You use the <> brackets in order to down cast a type. 
	In up cast, you just need to know that one type is a subclass of another type.

let vs var
	- var variables are function scoped, where as let variables are block scoped;
	- let variables can't be redeclared;

	Example 1:
		for(var i=0;i<5;i++){
		   console.log(i);
		}
		console.log(i) // 5

		for(let i=0;i<5;i++){
		   console.log(i)
		}
		console.log(i)// i is undefined

	Example 2:
		function varTest() {
		 	var x = 1;
		  	if (true) {
		    	var x = 2;  // same variable!
		    	console.log(x);  // 2
		  	}
		  	console.log(x);  // 2
		}
		
		function letTest() {
		  let x = 1;
		  if (true) {
		    let x = 2;  // different variable
		    console.log(x);  // 2
		  }
		  console.log(x);  // 1
		} 






This is called type assertion in TypeScript, and since TypeScript 1.6, there are two ways to express this:



// Original syntax
var markerSymbolInfo = <MarkerSymbolInfo> symbolInfo;

// Newer additional syntax
var markerSymbolInfo = symbolInfo as MarkerSymbolInfo;

Both alternatives are functionally identical. The reason for introducing the as-syntax is that the original syntax conflicted with JSX, see the design discussion here.
--------------------------------------------------------------------------------------------------------------------------------
What is Destructuring?
	Destructuring is a convinient way of extracting data stored in arrays and objects(with less code).

What is Spread?
	It is the opposite of destructuring. 
	It is used to break the array OR object into individual elements. It is helpful in merging 2 or more arrays/objects.

--------------------------------------------------------------------------------------------------------------------------------
https://www.typescriptlang.org/play/

https://confluence.oraclecorp.com/confluence/display/CCS/Introduction+to+TypeScript
https://stackblitz.com/
https://next.plnkr.co/?utm_source=legacy&utm_medium=worker&utm_campaign=next

https://confluence.oraclecorp.com/confluence/pages/viewpage.action?pageId=1040712875
https://confluence.oraclecorp.com/confluence/display/CCS/TypeScript+Development+with+Visual+Studio+Code
VBCS demo: https://otube.oracle.com/media/0_axow8zoy
https://otube.oracle.com/media/OJET+Overview/0_e6rgue28/-1
https://otube.oracle.com/media/0_pi2gxk96
Best starter for OJET is OJET CookBook : http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html
https://confluence.oraclecorp.com/confluence/display/TA/Understanding+TypeScript+in+7+steps
https://confluence.oraclecorp.com/confluence/display/TA/JET+POC+for+Fusion+Applications

https://confluence.oraclecorp.com/confluence/display/TA/Akamai+Support+for+Static+Resources
https://confluence.oraclecorp.com/confluence/display/TA/2018/08/27/EventHub+Cloud+Service
https://confluence.oraclecorp.com/confluence/display/CCS/VBCS+Development+for+Knowledge+Center
https://confluence.oraclecorp.com/confluence/pages/viewpage.action?pageId=1237836884
http://exchange.oraclecorp.com/ui/index.html?root=home
https://confluence.oraclecorp.com/confluence/display/JET/Extended+Audits+for+Custom+Component+Authors
https://confluence.oraclecorp.com/confluence/display/JET/JET+Demo+Review+Meeting
https://confluence.oraclecorp.com/confluence/display/JET/JET+Tooling+-+8.1+Typescript+Changes
https://github.com/abaranovskis-redsamurai/jettypescriptapp 
https://confluence.oraclecorp.com/confluence/display/JET/JET
https://confluence.oraclecorp.com/confluence/display/SAD/TypeScript+Learning
https://github.com/microsoft/TypeScript/wiki/%27this%27-in-TypeScript








TypeScript has a lot of features like compile-time checking, type inference, type erasure, interfaces, 
enumerated type, generic, namespaces, tuple, await, classes, modules, optional or default parameters, 
anonymous functions. It is more scalable and we can build robust components. 
It is independent of platform, browser and operating system also. 

some constraints that come into play when working with generics.
How do we limit the types that generic code can work with down to a small subset of classes or interfaces?
Are we able to specify multiple types within generic code, and can we specify a relationship between these two generic types?

TypeScript lets you specify which version is desired. The degree of detail means that you can generate JavaScript compatible with a very old browser or a new one, or with a feature that is planned to be available but not yet there. The output is a different JavaScript, depending on which target. This feature allows you to use modern TypeScript syntax; for example, async is not fully supported by all browsers today, but TypeScript can target a version of ECMAScript that doesnâ€™t support it.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What is Typescirpt?
	Javascript + Types;

Purpose of Typescript?
	TS helps you to catch and fix type related errors during compile time itself;
    Sometimes, that comes at the expense of having to define complex value types;




Install TS 
	npm install --global typescript 			# Node JS is mandatory for installing TS!
	tsc -v

Setup Visual Studio Code for TypeScript Development;
	- Install Code
	  View -> Command Pallette -> Search for 'Install code' -> Install 'code' command in PATH;
	  It helps you in launching VSC from CLI;
	- Install Prettier Extension
	  View -> Extensions -> Prettier - Code formatter
	  CMD + Shift + P -> Format Document OR only Selection
	  Preferences -> Settings -> Search for 'Format on Save' and select it;
	  Preferences -> Settings -> Search for 'Tab Size' and change it to 4;
	- Use Solarized Theme; 
	  Preferences -> Color Theme -> Select 'Solarized Theme';
	
How to compile TypeScript files?
	tsc helloworld.ts 					# Compiles ts to js file;
	node main.js 						# Run js file generated;
	ts-node helloworld.ts 				# Shortcut to: tsc helloworld.ts && node helloworld.js

	tsc f1.ts f2.ts f3.ts
	tsc --watch file.ts 				# The moment any changes are saved to file.ts, it is compiled;
	tsc 1_helloworld.ts --outDir out 	# Move generated JS files to out dir;